package org.firstinspires.ftc.teamcode;

import com.qualcomm.hardware.bosch.BNO055IMU;
import com.qualcomm.hardware.bosch.JustLoggingAccelerationIntegrator;
import com.qualcomm.robotcore.eventloop.opmode.LinearOpMode;
import com.qualcomm.robotcore.eventloop.opmode.TeleOp;
import com.qualcomm.robotcore.hardware.CRServo;
import com.qualcomm.robotcore.hardware.DcMotor;
import com.qualcomm.robotcore.hardware.DcMotorSimple;
import com.qualcomm.robotcore.hardware.DigitalChannel;
import com.qualcomm.robotcore.hardware.Servo;
import com.qualcomm.robotcore.hardware.TouchSensor;
import com.qualcomm.robotcore.util.ElapsedTime;
import com.qualcomm.robotcore.util.Range;
import com.qualcomm.robotcore.util.RobotLog;

import org.firstinspires.ftc.robotcore.external.navigation.Acceleration;
import org.firstinspires.ftc.robotcore.external.navigation.AngleUnit;
import org.firstinspires.ftc.robotcore.external.navigation.AxesOrder;
import org.firstinspires.ftc.robotcore.external.navigation.AxesReference;
import org.firstinspires.ftc.robotcore.external.navigation.Orientation;

import java.io.BufferedWriter;
import java.io.FileWriter;
import java.io.IOException;
import java.util.Date;
import java.util.Locale;

@TeleOp
public class OFC extends LinearOpMode {
    private DcMotor LMF;
    private DcMotor LMB;
    private DcMotor RMF;
    private DcMotor RMB;
    private DcMotor Esteira;
    private DcMotor MB;      //Motor - Braço - Ticks 1120
    private DcMotor MC;      //Motor - Coletar
    private DcMotor ML;

    private Servo SL;
    private Servo SC;       //Sero - coleta
    private CRServo SPR;
    private CRServo SPL;

    DigitalChannel digitalTouch;  // Hardware Device Object

    boolean gravar = false;
    boolean gravar2 = false;
    double valorArmazenado[][] = new double[500][5];
    int iGravacao = 0;
    int jGravacao = 0;
    double speed = 1;
    double angulofinalE;
    double angulofinalD;
    double angulorealE = 0;
    double angulorealD = 0;
    final double PI = Math.PI;
    double fMD = 0;
    double fME = 0;
    double forcax = 0;
    double forcax2 = 0;
    double forcay = 0;
    ElapsedTime timer3 = new ElapsedTime();
    double timer5 = 0;
    double forca, pointBraco;
    double servoLagosta = 0;
    double  MIN_PALETA = 0;
    double  MAX_PALETA = 1;
    double  speedPaleta = 0.01;
    int position = 0;

    BNO055IMU imu;

    Orientation angles;


    @Override public void runOpMode() {
        boolean qqw = true;
        double pointBraco = 0;
        double powerBraco;
        String nivel = "";
        double switchAngle = 0;
        boolean c = false;
        double speedBraco = 0.5;

        BNO055IMU.Parameters parameters = new BNO055IMU.Parameters();
        parameters.angleUnit           = BNO055IMU.AngleUnit.DEGREES;
        parameters.accelUnit           = BNO055IMU.AccelUnit.METERS_PERSEC_PERSEC;
        parameters.calibrationDataFile = "BNO055IMUCalibration.json"; // see the calibration sample opmode
        parameters.loggingEnabled      = true;
        parameters.loggingTag          = "IMU";
        parameters.accelerationIntegrationAlgorithm = new JustLoggingAccelerationIntegrator();

        digitalTouch = hardwareMap.get(DigitalChannel.class, "touch");
        digitalTouch.setMode(DigitalChannel.Mode.INPUT);

        imu = hardwareMap.get(BNO055IMU.class, "imu");
        imu.initialize(parameters);

        angles   = imu.getAngularOrientation(AxesReference.INTRINSIC, AxesOrder.ZYX, AngleUnit.DEGREES);
        LMF = hardwareMap.get(DcMotor.class, "LMF");
        LMB = hardwareMap.get(DcMotor.class, "LMB");
        RMF = hardwareMap.get(DcMotor.class, "RMF");
        RMB = hardwareMap.get(DcMotor.class, "RMB");
        Esteira = hardwareMap.get(DcMotor.class, "MMT");
        MC = hardwareMap.get(DcMotor.class,"MC");
        MB = hardwareMap.get(DcMotor.class, "MB");
        ML = hardwareMap.get(DcMotor.class, "ML");

        SC = hardwareMap.get(Servo.class, "SC");
        SL = hardwareMap.get(Servo.class,"SL");

        SPR = hardwareMap.crservo.get("SPR");
        SPL = hardwareMap.crservo.get("SPL");

        LMF.setDirection(DcMotorSimple.Direction.REVERSE);
        LMB.setDirection(DcMotorSimple.Direction.FORWARD);
        RMF.setDirection(DcMotorSimple.Direction.FORWARD);
        RMB.setDirection(DcMotorSimple.Direction.FORWARD);
        Esteira.setDirection(DcMotorSimple.Direction.FORWARD);
        MB.setDirection(DcMotorSimple.Direction.REVERSE);
        MC.setDirection(DcMotorSimple.Direction.FORWARD);
        ML.setDirection(DcMotorSimple.Direction.FORWARD);

        SL.setDirection(Servo.Direction.FORWARD);
        SC.setDirection(Servo.Direction.REVERSE);

        ML.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        ML.setMode(DcMotor.RunMode.RUN_USING_ENCODER);

        MB.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        MB.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
        MB.setZeroPowerBehavior(DcMotor.ZeroPowerBehavior.BRAKE);
        ML.setZeroPowerBehavior(DcMotor.ZeroPowerBehavior.BRAKE);


        waitForStart();

        timer3.time();
        while(opModeIsActive()){
            double y = -gamepad1.left_stick_y;
            double x = gamepad1.left_stick_x;
            double x2 = gamepad1.right_stick_x;
            double y2 = -gamepad1.right_stick_y;
            double d = Math.hypot(x,y);
            double d2 = Math.hypot(x2, y2);
            double angulorad = (d!=0)?Math.asin(y/d):0;
            double angulo = Math.toDegrees(angulorad);
            double angulorad2 = (d2!=0)?Math.asin(y2/d2):0;
            double anguloD = Math.toDegrees(angulorad2);
            boolean r1 = gamepad1.right_bumper;
            boolean l1 = gamepad1.left_bumper;
            double anguloRobo;

            if (digitalTouch.getState() == true) {
                telemetry.addData("Digital Touch", "Is Not Pressed");
            } else {
                telemetry.addData("Digital Touch", "Is Pressed");
            }

//========================================== CONTROLE - 1 ==========================================

            //Control Speed
            speed = gamepad1.b ? 1 : gamepad1.a ? 0.5 : gamepad1.x ?0.25:speed;

//            if (gamepad1.dpad_up){
//                setPowerGravado();
//            }
            switchAngle = gamepad1.dpad_down ? getAngle() : switchAngle;

            // Pegar ângulo Joy Esquerdo
            //1º QUADRANTE
            if((angulo >= 0) && (angulo <= 90) && (x >= 0)) {
                angulofinalE = angulo;
            }
            //2º QUADRANTE
            else if ((angulo >= 0) && (angulo <= 90) && (x <= 0)) {
                angulofinalE = 180-angulo;
            }
            //3º QUADRANTE
            else if ((angulo <= 0) && (angulo >= -90) && (x <= 0)) {
                angulofinalE = -angulo-180;
            }
            //4º QUADRANTE
            else if ((angulo <= 0) && (angulo >= -90) && (x >= 0)) {
                angulofinalE = angulo;
            }

            // Pegar ângulo Joy Direito
            //1º QUADRANTE
            if((x2 >= 0 ) && (y2 >= 0)){
                angulofinalD = anguloD;
            }
            // 2º QUADRANTE
            else if((x2 < 0 ) && (y2 >= 0)) {
                angulofinalD = 180-anguloD;
            }
            // 3º QUADRANTE
            else if((x2 < 0 ) && (y2 < 0)){
                angulofinalD = -anguloD-180;
            }
            // 4º QUADRANTE
            else if((x2 >= 0) && (y2 < 0)) {
                angulofinalD = anguloD;
            }
            // MOVIMENTAÇÃO POR ÂNGULO

            anguloRobo = getAngle();
            //Analógico Esquerdo
            angulorealE =  angulofinalE - anguloRobo + switchAngle;
            forcay = Math.sin(Math.toRadians(angulorealE)) * d;
            forcax = Math.cos(Math.toRadians(angulorealE)) * d;

            //Analógico Direito
            angulorealD =  angulofinalD - anguloRobo + switchAngle;
            forcax2 = Math.cos(Math.toRadians(angulorealD)) * d2;

            //1º QUADRANTE FORÇA

            angulorad = (d!=0)?Math.asin(forcay/d):0;

            if((forcax>= 0) && (forcay>=0)) {
                fME = d;
                fMD = (((4 / PI) * angulorad) - 1) * d;

            }
            //2º QUADRANTE FORÇA
            else if ((forcax< 0) && (forcay>=0)) {
                fME = (((4 / PI) * angulorad) - 1) * d;
                fMD = d;
            }
            //3º QUADRANTE FORÇA
            else if ((forcax< 0) && (forcay<0)) {
                fME = -d;
                fMD = (((4 / PI) * angulorad) + 1) * d ;
            }
            //4º QUADRANTE FORÇA
            else if ((forcax>= 0) && (forcay<0)) {
                fME = (((4 / PI) * angulorad) + 1) * d;
                fMD = -d;
            }

//             Set Force

            if(r1){
                Esteira.setPower(1);
            }else if(l1){
                Esteira.setPower(-1);
            }else{
                Esteira.setPower(0);
            }

//========================================== CONTROLE - 2 ==========================================

            if (gamepad2.right_bumper) {
                SPR.setPower(1);
                SPL.setPower(-1);
            } else if (gamepad2.left_bumper) {
                SPR.setPower(-1);
                SPL.setPower(1);
            } else {
                SPR.setPower(0);
                SPL.setPower(0);
            }

            if (gamepad2.dpad_up || gamepad2.dpad_right) {
                servoLagosta += speedPaleta;
            } else if (gamepad2.dpad_down || gamepad2.dpad_left) {
                servoLagosta -= speedPaleta;
            }

            servoLagosta = Range.clip(servoLagosta, MIN_PALETA, MAX_PALETA);
            SL.setPosition(servoLagosta);
            // para o braço subir
            speedBraco = gamepad2.b ? 0.5 : gamepad2.x ? 0.15 : gamepad2.y ? 0.3 : speedBraco;

            telemetry.addData("Braço - ",MB.getCurrentPosition());

//========================================SET POWER MOTORS==========================================
            // para voltar
            if(gamepad2.a){
                MB.setPower(-0.1);
                sleep(250);
                MB.setPower(0);
                sleep(100);
                while(digitalTouch.getState()){
                    MB.setPower(-0.1);
                }
            }
            
            position = gamepad2.dpad_up?70:gamepad2.dpad_down?0:position;
            ML.setTargetPosition(position);
            ML.setPower(1);
            ML.setMode(DcMotor.RunMode.RUN_TO_POSITION);

            RMF.setPower((fMD-x2) * speed);
            LMF.setPower((fME+x2) * speed);
            RMB.setPower((fME-x2) * speed);
            LMB.setPower((fMD+x2) * speed);

            MB.setPower(-gamepad2.left_stick_y * speedBraco);
            MC.setPower(gamepad2.right_stick_y);
            timer5 = timer3.time();
//            gravacao();
            telemetry.update();
//            sleep(20);
        }
    }

    public void gravacao() {
        if (gamepad1.y) {
            if (gravar) {
                gravar2 = !gravar2;
            }
            gravar = false;
        } else {
            gravar = true;
        }
        if (gravar2) {
            telemetry.addLine("GRAVANDO VALOR");
            telemetry.addLine("To gravando");            // GRAVAR
            valorArmazenado[iGravacao][0] = ((fMD-forcax2) * speed);   //RMF
            valorArmazenado[iGravacao][1] = ((fME+forcax2) * speed);   //LMF
            valorArmazenado[iGravacao][2] = ((fME-forcax2) * speed);  // RMB
            valorArmazenado[iGravacao][3] = ((fMD+forcax2) * speed);  // LMB
            valorArmazenado[iGravacao][4] = timer3.time() - timer5;
            telemetry.addData("TIMER: ", timer3.time() - timer5);
            telemetry.addData("TIMER GRAVADO: ", new Double(valorArmazenado[iGravacao][4]).longValue());

            iGravacao++;
            jGravacao = iGravacao;
        } else {
            iGravacao = 0;

        }
    }

    public void setPowerGravado() {
        timer3.time();
        for (int i = 0; i < jGravacao; i++) {
            telemetry.update();
            RMF.setPower(valorArmazenado[i][0]);
            LMF.setPower(valorArmazenado[i][1]);
            RMB.setPower(valorArmazenado[i][2]);
            LMB.setPower(valorArmazenado[i][3]);
            timer5 = timer3.time();
            sleep(20);
        }
        try {
            this.saveGravacao(valorArmazenado);
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private void saveGravacao(double [][] storedValue) throws IOException {
        System.out.println("SAVE_GRAVACAO_WORKING");
        StringBuffer builder = new StringBuffer();
        for(int i = 0; i < jGravacao; i++) {
            System.out.println("SAVE_GRAVACAO_LOOP_ONE");
            for(int j = 0; j < 4; j++) {
                System.out.println("SAVE_GRAVACAO_LOOP_TWO");
                builder.append(storedValue[i][j] + "");
                if(j < storedValue.length - 1)
                    builder.append(",");
            }
            builder.append("\n");
        }
        BufferedWriter writer = new BufferedWriter(new FileWriter("/storage/emulated/0/FIRST/RecordedGravacao/AutonomoGeduc.txt"));
        writer.write((builder.toString()));
        writer.close();
    }

    public double getAngle(){
        Orientation orientation = imu.getAngularOrientation(AxesReference.INTRINSIC, AxesOrder.ZYX, AngleUnit.DEGREES);
        return orientation.firstAngle;
    }
}
